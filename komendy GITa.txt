git help - pokazuje najwa¿niejsze komendy
git help KOMENDA np.: git help init - pomoc dla konkretnej komendy (init)
git init - tworzy nowe repozytorium w obecnej lokalizacji
git status - pokazuje gdzie jest dany plik
git diff - pokazuje ró¿nice w zawartoœci pliku pomiêdzy stagem a working directory
git diff --staged - ró¿nice pomiêdzy plikem z repozytorium a plikiem ze stage'a
git add - przenosi z working directory -> stage (plik jest œledzony); git add . -przen. wszystko
git commit - przenosi z stage -> repozytorium (git commit -m "komentarz" NazwaPiku.rozszerzenie)
git commit -v - do komentarza trafi¹ równie¿ poszczególne zmodyfikowane wiersze, pokazuj¹c, co dok³adnie zrobi³eœ
git clean -idf (i-interaktywne, d-foldery f-...) - usuwa zawartoœæ working directory (pytaj¹c)
git reset - cofa z stage -> working directory (git reset jest odwrotnoœci¹ git add)
git checkout -- Nazwapliku.rozszerzenie - to co jest w stage nadpisuje zawartoœæ Working 		directory, inaczej: zmiany dokonane na niesledzonym pliku s¹ anulowane
git chceckout 5c95a4d - przywraca plik z danej zmiany opisanej hashem 5c95a4d do W. Directory
git log - pokazuje kto i kiedy przes³a³ commita razem z jego komentarzem (git log --oneline)
-- nazwaPliku.txt -x wuœwietla x ostatnich komitów --author="Rupert O" git shortlog-wg autorów
git revert <hash> - przywraca zmiany z danego commitu przez wys³anie nowego, UWAGA! odwraca 		zmiany poczynione tylko w danym commitcie, wszystko póxniejsze zostaje
git reset - robimy tylko na commitach które nie s¹ upublicznione!, cofamy siê poprzez usuniêcie 	commitów, --mixed usuwane zmiany trafiaj¹ do Working directory, --soft zmiany trafiaj¹ 	na stage, --hard usuniêcie ca³kowite
git branch <nazwa> - tworzy now¹ ga³¹Ÿ, 
git branch - podgl¹d wszystkich ga³êzi
git checkout <nazwa> prze³¹cza na wskazan¹ ga³¹Ÿ
<<<<<<< Updated upstream

=======
git merge <nazwa> - przy³¹czanie ga³êzi do MASTER (wczeœniej nale¿y siê upewniæ ¿e jest siê na 		ga³êzi master
>>>>>>> Stashed changes

